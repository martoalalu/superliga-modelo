knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(tidyverse)
library(janitor)
library(ggpubr)
futbol <- read.csv("D:/estadistica-computacional/data/datos_2015.csv", encoding = 'Latin-1', sep=";")
futbol <- read.csv("https://raw.githubusercontent.com/martoalalu/superliga-modelo/master/data/datos_2015.csv", encoding = 'UTF-8', sep=";")
View(futbol)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(tidyverse)
library(janitor)
library(ggpubr)
futbol <- read.csv("https://raw.githubusercontent.com/martoalalu/superliga-modelo/master/data/datos_2015.csv", encoding = 'UTF-8', sep=";")
futbol <- clean_names(futbol)
futbol
cor_matrix <- cor(select(futbol, pts_2012_13,pts_2013_14,pts_2014, inversion_abs, inversion_relativa,valor,pos, pts,sudamericana, ascenso,libertadores), method = c("pearson", "kendall", "spearman"))
col<- colorRampPalette(c("red", "white", "blue"))(20)
heatmap(x = cor_matrix, col = col, symm = TRUE)
modelo_pts_valor <- lm(pts ~ valor, data = futbol)
modelo_pts_invabs <- lm(pts ~ inversion_abs, data = futbol)
modelo_pts_invrel <- lm(pts ~ inversion_relativa, data = futbol)
modelo_pts_valor
modelo_pts_invabs
modelo_pts_invrel
ggpubr::ggarrange(ncol=2, nrow=2,
ggplot(data = futbol) +
geom_point(aes(x = valor, y = pts)) +
labs(title = "Valor del equipo y puntos",
subtitle = "Superliga 2015",
y = "Puntos",
x= "Valor del equipo",
caption = "con línea de regresión") +
geom_abline(aes(intercept = 29.6578, slope = 0.7111), color = "blue")+
geom_smooth(aes(x = valor, y = pts), method = "lm"),
ggplot(data = futbol) +
geom_point(aes(x = inversion_abs, y = pts)) +
labs(title = "Inversión absoluta y puntos",
subtitle = "Superliga 2015",
y = "Puntos",
x= "Inversión absoluta",
caption = "con línea de regresión") +
geom_abline(aes(intercept = 36.142, slope = 1.744), color = "blue")+
geom_smooth(aes(x = inversion_abs, y = pts), method = "lm"),
ggplot(data = futbol) +
geom_point(aes(x = inversion_relativa, y = pts)) +
labs(title = "Inversión relativa y puntos",
subtitle = "Superliga 2015",
y = "Puntos",
x= "Inversión relativa",
caption = "con línea de regresión") +
geom_abline(aes(intercept = 36.83, slope = 20.35), color = "blue")+
geom_smooth(aes(x = inversion_relativa, y = pts), method = "lm")
)
summary(modelo_pts_valor)
summary(modelo_pts_invabs)
summary(modelo_pts_invrel)
#Modelo
modelo_pts <- lm(pts ~ pts_2012_13 + pts_2013_14 + pts_2014 + inversion_abs +
inversion_relativa + valor + libertadores + sudamericana + ascenso,
data = futbol)
summary(modelo_pts)
residuos1 <- residuals(modelo_pts)
# Agrego la columna de con los residuos al data frame y los visualizamos
futbol <- futbol %>% mutate(residuo_ml = residuos1)
ggplot(futbol) +
geom_point(aes(x = pts, y = residuo_ml)) +
geom_hline(yintercept = 0, col = "blue") +
labs(x = "Pts", y = "Residuo regresión lin. aplicada")
hist(futbol$residuo_ml)
par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
plot(modelo_pts)
par(mfrow=c(1,1))
step(modelo_pts)
modelo_step <- lm(pts ~ pts_2014 + inversion_abs + inversion_relativa +
valor + ascenso, data = futbol)
summary(modelo_step)
residuos_step <- residuals(modelo_step)
# Agrego la columna de con los residuos al data frame y los visualizamos
futbol <- futbol %>% mutate(residuo_step = residuos_step)
ggplot(futbol) +
geom_point(aes(x = pts, y = residuos_step)) +
geom_hline(yintercept = 0, col = "blue") +
labs(x = "Pts", y = "Residuo regresión lin. aplicada")
hist(futbol$residuo_step)
par(mfrow=c(2,2)) # Change the panel layout to 2 x 2
plot(modelo_step)
par(mfrow=c(1,1))
futbol <- futbol %>%
mutate(log_pts = log(pts),
inversion_abs_log=log(inversion_abs),
inversion_relativa_log=log(inversion_relativa),
valor_log=log(valor),
ascenso_log=log(ascenso),
pts_2014_log=log(pts_2014))
futbol$inversion_abs_log
library(robustHD)
futbol <- futbol %>%
mutate(pts_std = standardize(pts),
inversion_abs_std=standardize(inversion_abs),
inversion_relativa_std=standardize(inversion_relativa),
valor_std=standardize(valor),
ascenso_std=standardize(ascenso),
pts_2014_std=standardize(pts_2014))
modelo_std <- lm(pts_std ~ pts_2014_std + inversion_abs_std + inversion_relativa_std +
valor_std + ascenso_std, data = futbol)
summary(modelo_std)
futbol <- futbol %>%
mutate(valor_2014=valor-inversion_abs)
futbol <- futbol %>%
mutate(eficiencia_2014=valor_2014 / pts_2014)
futbol$eficiencia_2014[!is.finite(futbol$eficiencia_2014)]<- 0
modelo_step_2 <- lm(pts ~ pts_2014 + inversion_abs +
inversion_relativa + valor + ascenso + eficiencia_2014,
data = futbol)
summary(modelo_step_2)
reg <- function(X,Y){
boot <- sample.int(nrow(futbol),nrow(futbol),replace=T)
boot_fit = lm(pts ~ pts_2014 + inversion_abs + inversion_relativa +
valor + ascenso,data=futbol[boot,])
return(coef(boot_fit))
}
boot <- t(replicate(10000,reg(X,Y)))
head(boot)
par(mfrow=c(3,2))
hist(boot[,1])
hist(boot[,2])
hist(boot[,3])
hist(boot[,4])
hist(boot[,5])
hist(boot[,6])
quantile(boot[,1],p=c(.025,.25,.5,.75,.975))
quantile(boot[,2],p=c(.025,.25,.5,.75,.975))
quantile(boot[,3],p=c(.025,.25,.5,.75,.975))
quantile(boot[,4],p=c(.025,.25,.5,.75,.975))
quantile(boot[,5],p=c(.025,.25,.5,.75,.975))
quantile(boot[,6],p=c(.025,.25,.5,.75,.975))
#Si hacemos confint del modelo dan distintos valores! ¿Es porque los otros están bootsrapeados?
confint(modelo_step)
hip_nula <- modelo_step$residuals + modelo_step$coefficients[1]
y_sin_x<-modelo_step$residuals + modelo_step$coefficients[1]
View(futbol)
datreg_M1 <- select(futbol, pts, pts_2014, inversion_abs, inversion_relativa, valor, ascenso)
datreg_M0 <- select(futbol, pts)
# Mi modelo: M1
fit_M1 <- lm(y ~ ., data = datreg_M1)
# Mi modelo: M1
fit_M1 <- lm(pts ~ ., data = datreg_M1)
# El modelo M0 (anidado dentro de M1)
fit_M0 <- lm(pts ~ ., data = datreg_M0)
summary(fit_M1)
summary(fit_M0)
# Extraigo los errores
residuos_M1 <- fit_M1$residuals
residuos_M0 <- fit_M0$residuals
fit_M0$fitted.values
# Extraigo la prediccion del modelo nulo M0, la cual voy a usar para generar un data set sintético
B0 = fit_M0$fitted.values
RSS_M1 <- sum(residuos_M1 ^ 2)
RSS_M0 <- sum(residuos_M0 ^ 2)
numerador = (RSS_M0 - RSS_M1) / (p_M1 - p_M0)
denominador = RSS_M1 / (N - p_M1)
p_M0 <- fit_M0$rank
p_M1 <- fit_M1$rank
N = nrow(datreg_M1)
## Calculo el numerador y el denominador
numerador = (RSS_M0 - RSS_M1) / (p_M1 - p_M0)
denominador = RSS_M1 / (N - p_M1)
## Calculo F
F_obs <- numerador / denominador
F_obs
reg <- function(datreg_M0, datreg_M1, B0, residuos_M1) {
# índice para hacer el boostrap
N <- nrow(datreg_M1)
boot_i <- sample.int(N, N, replace = T)
residuos_2_boot <- residuos_M1[boot_i]
datreg_M0$y <-  residuos_2_boot + B0
datreg_M1$y <-  residuos_2_boot + B0
boot_fit_M0 =  lm(y ~ ., data = datreg_M0)
boot_fit_M1 =  lm(y ~ ., data = datreg_M1)
boot_residuos_M0 <- boot_fit_M0$residuals
boot_residuos_M1 <- boot_fit_M1$residuals
RSS_M0 <- sum(boot_residuos_M0 ^ 2)
RSS_M1 <- sum(boot_residuos_M1 ^ 2)
p_M0 <- boot_fit_M0$rank
p_M1 <- boot_fit_M1$rank
numerador = (RSS_M0 - RSS_M1) / (p_M1 - p_M0)
denominador = RSS_M1 / (N - p_M1)
F_boot <- numerador / denominador
reg <- function(datreg_M0, datreg_M1, B0, residuos_M1) {
# índice para hacer el boostrap
N <- nrow(datreg_M1)
boot_i <- sample.int(N, N, replace = T)
# y sintético (recuerden que R copia lo que ingresa a la func)
residuos_2_boot <- residuos_M1[boot_i]
datreg_M0$y <-  residuos_2_boot + B0
datreg_M1$y <-  residuos_2_boot + B0
# M1 con los y's sintéticos
boot_fit_M0 =  lm(y ~ ., data = datreg_M0)
boot_fit_M1 =  lm(y ~ ., data = datreg_M1)
# Residuos
boot_residuos_M0 <- boot_fit_M0$residuals
boot_residuos_M1 <- boot_fit_M1$residuals
# Suma residuos al cuadrado
RSS_M0 <- sum(boot_residuos_M0 ^ 2)
RSS_M1 <- sum(boot_residuos_M1 ^ 2)
# F simulacion boot
p_M0 <- boot_fit_M0$rank
p_M1 <- boot_fit_M1$rank
numerador = (RSS_M0 - RSS_M1) / (p_M1 - p_M0)
denominador = RSS_M1 / (N - p_M1)
F_boot <- numerador / denominador
# Devuelve F_boot
return(F_boot)
}
boot <-
t(replicate(2000, reg(datreg_M0, datreg_M1, B0, residuos_M1)))
mean(F_obs < boot)
(mean(F_obs < boot)) < .05
hist(boot,xlim = c(0,35))
abline(v=F_obs,col="red",lwd=3)
hist(boot,xlim = c(0,35))
abline(v=F_obs,col="red",lwd=3)
set.seed(42)
datareg_ruido <- datareg
datareg_ruido[, c("Sepal.Width", "Petal.Width", "Species")] <-
matrix(rnorm(nrow(datareg_ruido) *
3),
nrow(datareg_ruido),
3)
x_submodelo <- c("Petal.Length")
datreg_M1 <- datareg_ruido
datreg_M0 <- datareg_ruido[c("y", x_submodelo)]
fit_M1 <- lm(y ~ ., data = datreg_M1)
# El modelo M0 (anidado dentro de M1)
fit_M0 <- lm(y ~ ., data = datreg_M0)
# Extraigo los errores
residuos_M1 <- fit_M1$residuals
residuos_M0 <- fit_M0$residuals
# Extraigo la prediccion del modelo nulo M0, la cual voy a usar para generar un data set sintético
B0 = fit_M0$fitted.values
# Calculo el valor del test F observado
## Calculo la suma de los errores al cuadrado del modelo de interés (M1, quien contiene al otro modelo) y M0 contine solo el intercept
RSS_M1 <- sum(residuos_M1 ^ 2)
RSS_M0 <- sum(residuos_M0 ^ 2)
## Calculo los grados de libertad
p_M0 <- fit_M0$rank
p_M1 <- fit_M1$rank
N = nrow(datreg_M1)
## Calculo el numerador y el denominador
numerador = (RSS_M0 - RSS_M1) / (p_M1 - p_M0)
denominador = RSS_M1 / (N - p_M1)
## Calculo F
F_obs <- numerador / denominador
F_obs
# Boostrapeo
boot <-
t(replicate(2000, reg(datreg_M0, datreg_M1, B0, residuos_M1)))
# Que tan probable es?
mean(F_obs < boot)
(mean(F_obs < boot)) < .05
hist(boot)
abline(v=F_obs,col="red",lwd=3)
boot
